@page "/writer"
@namespace ScriptWriterApp.Pages
@inject IJSRuntime jsRuntime
@inject IResizeListener resizeListener

<PageTitle>Writer</PageTitle>

<RadzenButton Icon="dns" style=@ExpandButtonStyle Click="ShowPanelMenu"/>

<RadzenCard class="px-3" Style="position: absolute;margin: 0;width: fit-content; max-width: 200px; height: 100%;background-color: #28363c;" Visible=@PanelMenuVisible>
    <RadzenButton Icon="dns" Style="float: right;background-color: #28363c" Click="ShowPanelMenu"/>
    <RadzenPanelMenu>
        <RadzenPanelMenuItem Path="#" Text="Test" Icon="dns"></RadzenPanelMenuItem>
        <RadzenPanelMenuItem Path="#" Text="Test" Icon="dns"></RadzenPanelMenuItem>
        <RadzenPanelMenuItem Path="#" Text="Test" Icon="dns"></RadzenPanelMenuItem>
        <RadzenPanelMenuItem Path="#" Text="Test" Icon="dns"></RadzenPanelMenuItem>
    </RadzenPanelMenu>
</RadzenCard>


<textarea rows="@Rows" @bind-value="MyText" @bind-value:event="oninput"/>

@code {
    //browser informations
    IJSObjectReference? browserFunctions;
    BrowserDimension browserDimension;
    //style
    private string ExpandButtonStyle { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            browserFunctions = await this.jsRuntime.InvokeAsync<IJSObjectReference>("Functions.getBrowserAction");
            browserDimension = await browserFunctions.InvokeAsync<BrowserDimension>("getWindowDimensions");
            ExpandButtonStyle = $"float:left; background-color: #28363c;position:fixed; top: {browserDimension.Height / 4}px";
        } catch (InvalidOperationException)
        {
            ExpandButtonStyle = $"float:left; background-color: #28363c;position:fixed; top: {browserDimension.Height / 4}px";
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            resizeListener.OnResized += OnWindowResize;
        }
    }

    //textarea
    private int Rows = 20;

    private bool PanelMenuVisible = false;

    private void CalculateSize(string value)
    {
        Rows = Math.Max(value.Split('\n').Length, value.Split('\r').Length);
        Rows = Math.Max(Rows, 20);
    }

    private string _myText;
    protected string MyText
    {
        get => _myText;
        set
        {
            _myText = value; 
            CalculateSize(value);
        }
    }

    //PanelMenu

    private void ShowPanelMenu()
    {
        PanelMenuVisible = (PanelMenuVisible) ? false : true;
    }

    private async void OnWindowResize(object _, BrowserWindowSize window)
    {
        ExpandButtonStyle = $"float:left; background-color: #28363c;position:fixed; top: {window.Height / 2}px";
        StateHasChanged();
    }
}
