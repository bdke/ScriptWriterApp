@page "/writer/pages/{PageID:int}"
@namespace ScriptWriterApp.Pages


@inject IResizeListener resizeListener
@inject ILogger<WritePage> logger
@inject IHttpContextAccessor httpContextAccessor
@inject BrowserService browserService

@inject ChangeHistoryAccessService changeHistoryAccess
@inject PagesDataAccessService pagesDataAccess
@inject NavigationManager Nav

<CascadingAuthenticationState>
<AuthorizeView>
<Authorized>

<PageTitle>Writer</PageTitle>


<textarea rows="@Rows" @bind-value="MyText" @bind-value:event="oninput"/>

@*write for a better style arrrrrrrrrrr*@
<RadzenButton Text="Save" style=@SaveButtonStyle Click="SaveText"/>

</Authorized>
</AuthorizeView>
</CascadingAuthenticationState>

@code {

    [Parameter]
    public int PageID { get; set; }

    private Logging log;
    private List<PagesData> pageDatas;
    private PagesData currentPageData;
    private string? userName;

    //style
    private string SaveButtonStyle { get; set; }

    //browser informations
    BrowserWindowSize browserDimension = new BrowserWindowSize() { Height = 0, Width = 0 };


    protected override async Task OnInitializedAsync()
    {
        string? IP = httpContextAccessor.HttpContext.Connection?.RemoteIpAddress.ToString();
        userName = httpContextAccessor.HttpContext.User.Claims.ElementAt(1).Value;
        log = new Logging(logger, Nav.Uri ,IP);

        pageDatas = await pagesDataAccess.GetValueAsync();

        var pageDatasID = from t in pageDatas select t.ID;
        if (!pageDatasID.Contains(PageID)) { Nav.NavigateTo("/Error"); }

        currentPageData = pageDatas.Find(x => x.ID == PageID);
        pTextValue = currentPageData.pTexts.Split("\n\n");
        _myText = currentPageData.Texts;

        try
        {
            BrowserWindowSize browserDimension = await browserService.GetWindowSize();
            SaveButtonStyleChange(browserDimension.Height);
        } 
        catch (InvalidOperationException)
        {
            SaveButtonStyleChange(browserDimension.Height);
        }
        log.Info("Intialized");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            resizeListener.OnResized += OnWindowResize;
            log.Debug("First Rendered");
        }
    }

    //textarea
    private int Rows = 20;


    private string[] pTextValue;

    private string pMyText;
    private string _myText;
    protected string MyText
    {
        get => _myText;
        set
        {
            pMyText = _myText;
            _myText = value; 
            Rows = Math.Max(value.Split("\n\n").Length, value.Split('\r').Length);
            Rows = Math.Max(Rows, 20);
            DetectNewLine(value).Wait();

        }
    }



    private async Task SaveText() 
    {
        await DetectNewLine(_myText, true);
    }

    private async void OnWindowResize(object _, BrowserWindowSize window)
    {
        SaveButtonStyleChange(window.Height);
        log.Debug("Window size changed");
    }

    private void SaveButtonStyleChange(int Height)
    {
        SaveButtonStyle = $"float: inline-end; background-color: #0CFF00; position: fixed; top: {Height / 1.25}px";
        StateHasChanged();
    }
}
